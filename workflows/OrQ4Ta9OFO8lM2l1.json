{"createdAt":"2025-05-13T13:24:13.832Z","updatedAt":"2025-06-05T21:01:57.927Z","id":"OrQ4Ta9OFO8lM2l1","name":"Embed All","active":false,"nodes":[{"parameters":{"jsonMode":"expressionData","jsonData":"={{ $json.data || $json.text || $json.concatenated_data }}","options":{"metadata":{"metadataValues":[{"name":"=file_id","value":"={{ $('Set Metadata').first().json.file_id }}"},{"name":"file_name","value":"={{ $('Set Metadata').item.json.file_name }}"},{"name":"file_mimetype","value":"={{ $('Set Metadata').item.json.file_mimetype }}"},{"name":"file_size","value":"={{ $('Set Metadata').item.json.file_size }}"},{"name":"file_path","value":"={{ $('Set Metadata').item.json.file_path }}"},{"name":"company","value":"={{ $('Set Metadata').item.json.company }}"},{"name":"title","value":"={{ $('Set Metadata').item.json.title }}"},{"name":"file_ext","value":"={{ $('Set Metadata').item.json.file_ext }}"}]}}},"id":"b59c3524-8066-4597-984d-7fdb08e900bb","name":"Default Data Loader","type":"@n8n/n8n-nodes-langchain.documentDefaultDataLoader","typeVersion":1,"position":[4860,940]},{"parameters":{"operation":"text","options":{}},"id":"3c293496-217a-4ec9-b9de-7847e1762568","name":"Extract Document Text","type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[4520,580],"alwaysOutputData":true},{"parameters":{"aggregate":"aggregateAllItemData","options":{}},"id":"e0dcc0af-3c9d-4064-bf79-a99b5c7c743f","name":"Aggregate","type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[2980,160]},{"parameters":{"fieldsToSummarize":{"values":[{"aggregation":"concatenate","field":"data"}]},"options":{}},"id":"fe8797ee-57f0-4651-ac21-502566ff5436","name":"Summarize","type":"n8n-nodes-base.summarize","typeVersion":1,"position":[3200,180]},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"2ae7faa7-a936-4621-a680-60c512163034","leftValue":"={{ $json.mimeType }}","rightValue":"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"fc193b06-363b-4699-a97d-e5a850138b0e","leftValue":"={{ $json.mimeType }}","rightValue":"=text/csv","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"b69f5605-0179-4b02-9a32-e34bb085f82d","leftValue":"={{ $json.mimeType }}","rightValue":"text/plain","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"leftValue":"={{ $json.mimeType }}","rightValue":"=application/pdf","operator":{"type":"string","operation":"equals"},"id":"fbdf6e21-c05f-484f-864b-4065e3d17287"}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"da9e7a74-908f-4488-844e-9b98b1d1f31b","leftValue":"={{ $json.mimeType }}","rightValue":"application/vnd.openxmlformats-officedocument.presentationml.presentation","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}}]},"options":{}},"id":"cf88e58e-b097-4dc8-9fd9-07d8a9f60501","name":"Switch","type":"n8n-nodes-base.switch","typeVersion":3,"position":[2540,560]},{"parameters":{"operation":"xlsx","options":{}},"id":"219b02f6-93ea-4657-a2cf-935144ec5c6a","name":"Extract from Excel","type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[2760,120]},{"parameters":{"assignments":{"assignments":[{"id":"f422e2e0-381c-46ea-8f38-3f58c501d8b9","name":"schema","value":"={{ $('Extract from Excel').isExecuted ? $('Extract from Excel').first().json.keys().toJsonString() : $('Extract from CSV').first().json.keys().toJsonString() }}","type":"string"},{"id":"bb07c71e-5b60-4795-864c-cc3845b6bc46","name":"data","value":"={{ $json.concatenated_data }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[3420,360],"id":"0b67ffbf-b183-40c9-91a1-ed427b6a084f","name":"Set Schema"},{"parameters":{"options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[2760,420],"id":"86a3df0d-56be-4586-b1aa-f2b0963526a2","name":"Extract from CSV"},{"parameters":{"operation":"executeQuery","query":"CREATE TABLE IF NOT EXISTS document_metadata (\n    id TEXT PRIMARY KEY,\n    company TEXT,\n    file_id TEXT,\n    file_name TEXT,\n    file_mimetype TEXT,\n    file_size BIGINT,\n    file_path TEXT,\n    title TEXT,\n    file_ext TEXT,\n    created_at TIMESTAMP DEFAULT NOW(),\n    schema TEXT\n);","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.5,"position":[580,380],"id":"f5e7dd12-af56-416c-8e1c-baca24db0009","name":"Create Document Metadata Table","executeOnce":true,"alwaysOutputData":true,"credentials":{"postgres":{"id":"LtUvizUisCSKWSoT","name":"Postgres Supabase"}}},{"parameters":{"operation":"executeQuery","query":"CREATE TABLE IF NOT EXISTS document_rows (\n    id SERIAL PRIMARY KEY,\n    dataset_id TEXT REFERENCES document_metadata(id),\n    row_data JSONB  -- Store the actual row data\n);","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.5,"position":[800,380],"id":"4230f52b-c8a5-446a-9c2c-bc115e3a50b7","name":"Create Document Rows Table (for Tabular Data)","alwaysOutputData":true,"executeOnce":true,"credentials":{"postgres":{"id":"LtUvizUisCSKWSoT","name":"Postgres Supabase"}}},{"parameters":{"options":{"reset":false}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[1160,800],"id":"740f0d68-44ec-4b79-815a-5bdeb8d94ed0","name":"Loop Over Items"},{"parameters":{"operation":"upsert","schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"document_metadata","mode":"list","cachedResultName":"document_metadata"},"columns":{"mappingMode":"defineBelow","value":{"file_size":"={{ $('Set Metadata').item.json.file_size }}","id":"={{ $('Set Metadata').item.json.file_path }}","company":"={{ $('Set Metadata').item.json.company }}","file_id":"={{ $('Set Metadata').item.json.file_id }}","file_name":"={{ $('Set Metadata').item.json.file_name }}","file_mimetype":"={{ $('Set Metadata').item.json.file_mimetype }}","file_path":"={{ $('Set Metadata').item.json.file_path }}","title":"={{ $('Set Metadata').item.json.title }}","file_ext":"={{ $('Set Metadata').item.json.file_ext }}"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":true,"defaultMatch":true,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"company","displayName":"company","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false},{"id":"file_id","displayName":"file_id","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false},{"id":"file_name","displayName":"file_name","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false},{"id":"file_mimetype","displayName":"file_mimetype","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false},{"id":"file_size","displayName":"file_size","required":false,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":false},{"id":"file_path","displayName":"file_path","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false},{"id":"title","displayName":"title","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false},{"id":"file_ext","displayName":"file_ext","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false,"removed":false},{"id":"created_at","displayName":"created_at","required":false,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":false},{"id":"schema","displayName":"schema","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.5,"position":[2100,600],"id":"7edd338a-a755-496e-bebf-394885c347c1","name":"Insert Document Metadata","executeOnce":true,"credentials":{"postgres":{"id":"LtUvizUisCSKWSoT","name":"Postgres Supabase"}}},{"parameters":{"schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"document_rows","mode":"list","cachedResultName":"document_rows"},"columns":{"mappingMode":"defineBelow","value":{"dataset_id":"={{ $('Set Metadata').item.json.file_path }}","row_data":"={{ $json.toJsonString().replaceAll(/'/g, \"''\") }}"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"number","canBeUsedToMatch":true,"removed":true},{"id":"dataset_id","displayName":"dataset_id","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"row_data","displayName":"row_data","required":false,"defaultMatch":false,"display":true,"type":"object","canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.5,"position":[2980,360],"id":"745cb5a2-5067-4916-b630-f399e3d1d10b","name":"Insert Table Rows","credentials":{"postgres":{"id":"LtUvizUisCSKWSoT","name":"Postgres Supabase"}}},{"parameters":{"operation":"upsert","schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"document_metadata","mode":"list","cachedResultName":"document_metadata"},"columns":{"mappingMode":"defineBelow","value":{"schema":"={{ $json.schema }}","id":"={{ $('Set Metadata').item.json.file_path }}","company":"={{ $('Set Metadata').item.json.company }}","file_id":"={{ $('Set Metadata').item.json.file_id }}","file_name":"={{ $('Set Metadata').item.json.file_name }}","file_mimetype":"={{ $('Set Metadata').item.json.file_mimetype }}","file_size":"={{ $('Set Metadata').item.json.file_size }}","file_path":"={{ $('Set Metadata').item.json.file_path }}","title":"={{ $('Set Metadata').item.json.title }}","file_ext":"={{ $('Set Metadata').item.json.file_ext }}"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":true,"defaultMatch":true,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"company","displayName":"company","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false},{"id":"file_id","displayName":"file_id","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false},{"id":"file_name","displayName":"file_name","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false},{"id":"file_mimetype","displayName":"file_mimetype","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false},{"id":"file_size","displayName":"file_size","required":false,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":false},{"id":"file_path","displayName":"file_path","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false},{"id":"title","displayName":"title","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false},{"id":"file_ext","displayName":"file_ext","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false},{"id":"created_at","displayName":"created_at","required":false,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":false},{"id":"schema","displayName":"schema","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.5,"position":[3640,360],"id":"2b946e0a-8b67-4fa7-aebb-965580818c03","name":"Update Schema for Document Metadata","credentials":{"postgres":{"id":"LtUvizUisCSKWSoT","name":"Postgres Supabase"}}},{"parameters":{"chunkSize":400,"options":{}},"type":"@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter","typeVersion":1,"position":[4960,1140],"id":"ecdc499b-168c-4510-b74a-66e5d45472f0","name":"Recursive Character Text Splitter"},{"parameters":{"operation":"executeQuery","query":"DO $$\nBEGIN\n    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'documents_pg') THEN\n        EXECUTE 'DELETE FROM documents_pg WHERE metadata->>''file_id'' LIKE ''%' || $1 || '%''';\n    END IF;\nEND\n$$;","options":{"queryReplacement":"={{ $json.file_id }}"}},"type":"n8n-nodes-base.postgres","typeVersion":2.5,"position":[1660,600],"id":"07cca490-a89e-450f-beb2-3366c63e4f56","name":"Delete Old Doc Records","credentials":{"postgres":{"id":"LtUvizUisCSKWSoT","name":"Postgres Supabase"}}},{"parameters":{"operation":"executeQuery","query":"DELETE FROM document_rows\nWHERE dataset_id LIKE '%' || $1 || '%';","options":{"queryReplacement":"={{ $('Set Metadata').item.json.file_id }}"}},"type":"n8n-nodes-base.postgres","typeVersion":2.5,"position":[1880,600],"id":"c9bfd8d4-8a05-475e-8e81-5617c7c1ab57","name":"Delete Old Data Records","credentials":{"postgres":{"id":"LtUvizUisCSKWSoT","name":"Postgres Supabase"}}},{"parameters":{"formTitle":"Upload Files","formFields":{"values":[{"fieldLabel":"company","placeholder":"Add company","requiredField":true},{"fieldLabel":"data","fieldType":"file","requiredField":true}]},"options":{}},"type":"n8n-nodes-base.formTrigger","typeVersion":2.2,"position":[620,800],"id":"56073806-60fb-4168-a0ae-54895712e8b9","name":"On form submission","webhookId":"66af3c1f-7299-4071-8b64-8a12f7ef682a"},{"parameters":{"jsCode":"const fs   = require('fs').promises;\nconst path = require('path');\n\nconst TARGET_DIR = '/data/shared';\nawait fs.mkdir(TARGET_DIR, { recursive: true });\n\nconst out = [];\n\n/* ← FIX: iterate over the incoming items themselves */\nfor (const inItem of $input.all()) {\n\n  // each file field in the form is one binary key (usually “data”)\n  const binKeys = Object.keys(inItem.binary || {});\n\n  for (const key of binKeys) {\n    const bin      = inItem.binary[key];\n    const fileName = bin.fileName || `${Date.now()}_${key}`;\n    const filePath = path.join(TARGET_DIR, fileName);\n\n    await fs.writeFile(filePath, Buffer.from(bin.data, 'base64'));\n\n    // emit one item per saved file\n    out.push({\n      json:   { ...inItem.json, path: filePath },\n      binary: { [key]: bin },\n    });\n  }\n}\n\nreturn out;          // one output item per uploaded file\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[820,800],"id":"050201b7-9f55-4ff3-8fab-8c9d80849eb9","name":"Save files to /data/shared","executeOnce":false},{"parameters":{"mode":"insert","tableName":"documents_pg","options":{}},"type":"@n8n/n8n-nodes-langchain.vectorStorePGVector","typeVersion":1,"position":[4760,720],"id":"a97f2b58-25c8-4e39-812b-458ae5661857","name":"Postgres PGVector Store RAG","credentials":{"postgres":{"id":"LtUvizUisCSKWSoT","name":"Postgres Supabase"}}},{"parameters":{"model":"nomic-embed-text:latest"},"type":"@n8n/n8n-nodes-langchain.embeddingsOllama","typeVersion":1,"position":[4740,940],"id":"342fd61f-c9ad-4f0b-95fa-d58ff5a54f9b","name":"Embeddings Ollama RAG","credentials":{"ollamaApi":{"id":"yM1QH7xdMzXQzdfe","name":"Ollama account"}}},{"parameters":{"assignments":{"assignments":[{"id":"6c7197dc-01d5-40cb-baff-8938f70860ee","name":"data","value":"={{ $json.data }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[4520,820],"id":"e44f8353-85a2-45fc-bbc7-7dc7ea73bf57","name":"Retrieve Data"},{"parameters":{"operation":"executeQuery","query":"CREATE TABLE IF NOT EXISTS n8n_chat_histories (\n    id SERIAL PRIMARY KEY,\n    session_id VARCHAR NOT NULL,\n    message JSONB NOT NULL\n);","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1020,380],"id":"b9fe655f-eca9-4f34-8756-d18c6f6ad3dd","name":"Create Chat History Table","credentials":{"postgres":{"id":"LtUvizUisCSKWSoT","name":"Postgres Supabase"}}},{"parameters":{"assignments":{"assignments":[{"id":"e49b7f54-7aaa-4b2b-a0fa-457c33f57a60","name":"file_id","value":"={{ $json.company + \"-\" + $json.data[0].filename.split(\" \").join(\"_\") }}","type":"string"},{"id":"f4536df5-d0b1-4392-bf17-b8137fb31a44","name":"file_name","value":"={{ $json.data[0].filename }}","type":"string"},{"id":"77d782de-169d-4a46-8a8e-a3831c04d90f","name":"file_mimetype","value":"={{ $json.data[0].mimetype }}","type":"string"},{"id":"8cc8563b-7ce5-4aec-a0d9-8b6f6e17da31","name":"file_size","value":"={{ $json.data[0].size }}","type":"number"},{"id":"88e8a974-5e40-4fa1-85fc-c678ae227f84","name":"file_path","value":"={{ $json.path }}","type":"string"},{"id":"d967e83b-370e-4e98-ad68-37671d82cac3","name":"company","value":"={{ $json.company }}","type":"string"},{"id":"f306ecd1-dceb-4ef7-adfe-b0fac2082893","name":"title","value":"={{ $json.company + \" - \" + $json.data[0].filename.replace(/\\.[^/.]+$/, '') }}","type":"string"},{"id":"92f5ae82-ea5f-480b-a507-99d04f523f44","name":"file_ext","value":"={{ $json.path.match(/\\.([^.]+)$/)?.[1] || '' }}","type":"string"}]},"options":{}},"id":"50c3d992-6515-4e92-bbd9-6a611bb6773c","name":"Set Metadata","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1440,600],"notesInFlow":false},{"parameters":{"fileSelector":"={{ $('Set Metadata').item.json.file_path }}","options":{"dataPropertyName":"=data"}},"type":"n8n-nodes-base.readWriteFile","typeVersion":1,"position":[2320,600],"id":"57e39988-2a3a-47ce-bca1-ef352405ad64","name":"ReadFiles from Disk"},{"parameters":{"jsCode":"const fs = require('fs');\nconst path = require('path');\nconst util = require('util');\nconst { exec } = require('child_process');\nconst execPromise = util.promisify(exec);\n\n// Pull binary and JSON inputs\nconst binaryData = items[0].binary.data.data; // raw base64 string\nconst DIR = $json.directory;\nconst fileName = $json.fileName;\nconst FILE = path.join(DIR, fileName);\nconst BASE = fileName.replace(/\\.[^.]+$/, '');\nconst PDF = path.join(DIR, `${BASE}.pdf`);\nconst PNG_PREFIX = path.join(DIR, `${BASE}-page`);\n\n// Decode and save PPTX to disk\nconst buffer = Buffer.from(binaryData, 'base64');\nfs.writeFileSync(FILE, buffer);\n\n// Convert PPTX to PDF\ntry {\n  await execPromise(`libreoffice --headless --convert-to pdf --outdir \"${DIR}\" \"${FILE}\"`);\n} catch (err) {\n  throw new Error(`LibreOffice conversion failed: ${err.message}`);\n}\n\n// Convert PDF to PNGs\ntry {\n  await execPromise(`pdftoppm -png -r 150 \"${PDF}\" \"${PNG_PREFIX}\"`);\n} catch (err) {\n  throw new Error(`pdftoppm conversion failed: ${err.message}`);\n}\n\n// Return the same JSON expected downstream\nreturn [\n  {\n    json: {\n      dir: DIR,\n      base: BASE,\n    },\n  },\n];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2760,900],"id":"e2f97dff-cb49-4a48-a5a3-9b41490c1b1f","name":"PPTX -> PDF"},{"parameters":{"content":"## Document Embedding \npdf, pptx, xlsx, csv, txt"},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[180,780],"id":"70834bc8-b63c-40ea-9009-faae31253216","name":"Sticky Note"},{"parameters":{"jsCode":"const path = require('path');\nconst util = require('util');\nconst { exec } = require('child_process');\nconst execPromise = util.promisify(exec);\n\n// Normalize inputs (for both switch and pptx routes)\nif (!$json.directory) $json.directory = $json.dir;\nif (!$json.fileName) $json.fileName = $json.base + '.pdf'; // Ensure full name in pptx case\n\nconst DIR = $json.directory;\nconst FILE = path.join(DIR, $json.fileName);\nconst BASE = $json.fileName.replace(/\\.[^.]+$/, '');\nconst outputPrefix = path.join(DIR, `${BASE}-page`);\n\n// Escape paths for shell safety using JSON.stringify (adds quotes and escapes)\nconst safeFILE = JSON.stringify(FILE);\nconst safeOUTPUT = JSON.stringify(outputPrefix);\n\ntry {\n  await execPromise(`pdftoppm -png -r 150 ${safeFILE} ${safeOUTPUT}`);\n} catch (err) {\n  throw new Error(`pdftoppm failed: ${err.message}`);\n}\n\n// Return compatible JSON\nreturn [\n  {\n    json: {\n      dir: DIR,\n      base: BASE,\n    },\n  },\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2980,820],"id":"00e45d5d-51a8-486f-bae9-1a85186f3546","name":"PDF -> PNG"},{"parameters":{"jsCode":"const fs = require('fs');\nconst path = require('path');\n\nconst out = [];\n\nfor (const inItem of $input.all()) {\n  // Accept direct input (already parsed JSON, no need for stdout parsing anymore)\n  const { dir, base } = inItem.json;\n\n  // Create pattern: base-page-N.png\n  const files = fs.readdirSync(dir);\n\n  // Filter to match files exactly like \"base-page-N.png\"\n  const pages = files\n    .filter(f =>\n      f.startsWith(`${base}-page`) && f.endsWith('.png')\n    )\n    .map(f => ({\n      fileName: f,\n      number: parseInt(f.match(/-page-(\\d+)\\.png$/)?.[1], 10)\n    }))\n    .filter(f => !isNaN(f.number)) // Remove anything that failed parsing\n    .sort((a, b) => a.number - b.number);\n\n  // Emit one item per page\n  pages.forEach(({ fileName, number }) => {\n    out.push({\n      json: {\n        page: number,\n        directory: dir,\n        fileName,\n        path: path.join(dir, fileName),\n      },\n    });\n  });\n}\n\nreturn out;\n"},"id":"b4a1145f-3920-4aae-aeea-e0199a8c8329","name":"Collect all image paths","type":"n8n-nodes-base.code","typeVersion":2,"position":[3200,820]},{"parameters":{"fileSelector":"={{ $json.path }}","options":{"dataPropertyName":"image"}},"id":"854a4645-4d7e-43b1-a1b6-d0cd2dd0596d","name":"Get all image binaries","type":"n8n-nodes-base.readWriteFile","typeVersion":1,"position":[3420,820]},{"parameters":{"jsCode":"const endpoint   = $env.AZURE_OPENAI_ENDPOINT;\nconst apiKey     = $env.AZURE_OPENAI_API_KEY;\nconst model = $env.AZURE_OPENAI_NANO;\nconst apiVersion = $env.AZURE_OPENAI_VERSION;\n\nif (!apiKey) throw new Error('AZURE_OPENAI_API_KEY missing');\n\nconst MAX_TOKENS    = 30000;\nconst PARALLEL      = 50;\nconst LAUNCH_DELAY  = 100;\nconst MAX_RETRIES   = 3;\nconst BASE_BACKOFF  = 1000;\nconst TIMEOUT       = 300000;\nconst TEMPERATURE   = 0.2;\n\nconst sleep = ms => new Promise(r => setTimeout(r, ms));\n\nasync function callOpenAI(b64, page) {\n  for (let attempt = 0; attempt < MAX_RETRIES; attempt++) {\n    try {\n      console.log(`▶️  page ${page} – attempt ${attempt + 1}`);\n      const res = await this.helpers.httpRequest({\n        method: 'POST',\n        url:    `${endpoint}/openai/deployments/${model}/chat/completions?api-version=${apiVersion}`,\n        json:   true,\n        timeout: TIMEOUT,\n        headers: { 'api-key': apiKey },\n        body: {\n          temperature: TEMPERATURE,\n          max_tokens:  MAX_TOKENS,\n          messages: [\n            {\n              role: 'system',\n              content: 'You are an assistant that returns exhaustive markdown descriptions of documents for experts, which will be provided as images taken from a single pdf page. This is necessary, because simple text extraction does not correctly pull tables and cannot describe important images, so you are here to work as an intelligent pdf extractor. Therefore, quote all on-page text verbatim - your job on this is to relay exactly what you see; while doing that, output tables as markdown tables, and describe important images (designs, drawings or charts) as well as you can. Do not describe images that provide no important knowledge.',\n            },\n            {\n              role: 'user',\n              content: [\n                { type: 'text', text: `Describe page ${page} in detail:` },\n                { type: 'image_url', image_url: { url: `data:image/png;base64,${b64}` } },\n              ],\n            },\n          ],\n        },\n      });\n\n      const txt = res.choices?.[0]?.message?.content?.trim() || '';\n      console.log(`✅  page ${page} – ${txt.length} chars`);\n      return txt;\n    } catch (err) {\n      console.error(`⚠️  page ${page} – ${err.message}`);\n      if (attempt === MAX_RETRIES - 1)\n        return `❌ error on page ${page}: ${err.message}`;\n\n      const wait = BASE_BACKOFF * 2 ** attempt;\n      console.log(`⏳  retry page ${page} in ${wait} ms`);\n      await sleep(wait);\n    }\n  }\n}\n\n/* ---------- orchestrate in parallel batches ---------- */\n\nconst inputItems = $input.all();       // one per page image\nconst outputs    = [];\n\nfor (let start = 0; start < inputItems.length; start += PARALLEL) {\n  const slice = inputItems.slice(start, start + PARALLEL);\n\n  const promises = slice.map((item, idxInSlice) => (async () => {\n    await sleep(idxInSlice * LAUNCH_DELAY);\n\n    // ensure we always have a numeric page identifier\n    const globalIdx = start + idxInSlice;          // 0-based overall index\n    const pageNo    = item.json.page ?? (globalIdx + 1);\n\n    const md = await callOpenAI.call(\n      this,\n      item.binary.image.data,\n      pageNo,\n    );\n\n    return {\n      json: {\n        page:      pageNo,\n        data:      md,\n\n        /* keep these so later nodes know the original file */\n        directory: item.json.directory,\n        fileName:  item.json.fileName,                     // Enerlogics_…-page-01.png\n        base:      item.json.fileName                     // Enerlogics_…-page\n                     ? item.json.fileName.replace(/-page-\\d+\\.png$/i, '')\n                     : undefined,\n      },\n    };\n\n  })());\n\n  outputs.push(...await Promise.all(promises));\n}\n\noutputs.sort((a, b) => a.json.page - b.json.page);   // keep 1 → N order\n\nreturn outputs;\n"},"id":"13513b77-2da7-4f09-b701-14928a1e4731","name":"PNG -> MD using AI","type":"n8n-nodes-base.code","typeVersion":2,"position":[3640,820]},{"parameters":{"aggregate":"aggregateAllItemData","options":{}},"id":"c8b19c46-ff85-43d3-b14c-a12afa4b290d","name":"Create a single MD file","type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[3860,820]},{"parameters":{"jsCode":"const fs   = require('fs');\nconst path = require('path');\n\nconst out = [];\n\nfor (const itm of $input.all()) {\n\n  /* ---------- derive directory & base name ---------- */\n  let directory = itm.json.directory;\n  let base      = itm.json.base;\n\n  /* If they were lost during aggregation, recover them\n     from the first page object in itm.json.data           */\n  if (!Array.isArray(itm.json.data) || itm.json.data.length === 0)\n    throw new Error('No page data present');\n\n  const firstPage = itm.json.data[0];\n\n  if (!directory) directory = firstPage.directory;\n  if (!base) {\n    const f = firstPage.fileName || '';\n    base = f.replace(/-page-\\d+\\.png$/i, '').replace(/\\.png$/i, '');\n  }\n\n  if (!directory || !base)\n    throw new Error('directory or base missing; cannot write markdown');\n\n  /* ---------- build markdown in correct order ---------- */\n  const pages = itm.json.data.sort((a, b) => a.page - b.page);\n\n  let md = `# ${base}\\n\\n`;\n  for (const p of pages)\n    md += `## Page ${p.page}\\n\\n${p.data}\\n\\n`;\n\n  const mdDir  = path.join(directory, 'md');\n  fs.mkdirSync(mdDir, { recursive: true });\n\n  const mdPath = path.join(mdDir, `${base}.md`);\n  fs.writeFileSync(mdPath, md, 'utf8');\n\n  out.push({\n    json:   { saved: mdPath, directory, base, data: md },\n    binary: {\n      data: {\n        data:     Buffer.from(md, 'utf8').toString('base64'),\n        mimeType: 'text/markdown',\n        fileName: `${base}.md`,\n      },\n    },\n  });\n}\n\nreturn out;            // one item per PDF\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4080,820],"id":"7bd5a6b7-46f5-4812-8b3e-657790d44012","name":"Write MD file"},{"parameters":{"jsCode":"const fs   = require('fs');\nconst path = require('path');\n\nfor (const itm of $input.all()) {\n\n  let { directory, base } = itm.json;\n\n  /* recover if missing */\n  if ((!directory || !base) && itm.json.saved) {\n    const parts = itm.json.saved.split('/');\n    directory   = parts.slice(0, -2).join('/');      // …/shared\n    base        = parts.slice(-1)[0].replace(/\\.md$/i, '');\n  }\n\n  if (!directory || !base) continue;   // nothing to clean\n\n  fs.readdirSync(directory)\n    .filter(f => f.startsWith(`${base}-page`) && f.endsWith('.png'))\n    .forEach(f => fs.unlinkSync(path.join(directory, f)));\n\n  itm.json.cleaned = true;\n}\n\nreturn $input.all().map(itm => ({ json: { data: itm.json.data } }));\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4300,820],"id":"2990f573-db0e-4570-95ae-de845c2ce2aa","name":"Delete all PNG"},{"parameters":{"content":"## Create Tables\nCreate tables if they don't exist"},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[180,360],"id":"50025c27-9cff-47bf-ba2b-1b8c42bf9dbe","name":"Sticky Note1"},{"parameters":{"content":"## N8N Native\npdf example"},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[180,-40],"id":"7a2e024a-3d9f-4087-9bdd-64c098d00243","name":"Sticky Note2"},{"parameters":{"operation":"pdf","options":{"keepSource":"both"}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[840,40],"id":"cdaa6ffc-fe36-412c-93f6-7fca99cfe5d5","name":"Extract from File"},{"parameters":{"formTitle":"Upload Files","formFields":{"values":[{"fieldLabel":"data","fieldType":"file","multipleFiles":false,"acceptFileTypes":".pdf","requiredField":true}]},"options":{}},"type":"n8n-nodes-base.formTrigger","typeVersion":2.2,"position":[620,40],"id":"14a2cfaa-adcc-4f10-8b04-a4f37b750224","name":"On form submission1","webhookId":"8b9f0d1f-3c01-47e5-9e55-2587dca9e256"},{"parameters":{"jsCode":"const text = $json.text || \"No content\";\n\nreturn [\n  {\n    json: {},\n    binary: {\n      data: {\n        data: Buffer.from(text).toString('base64'),\n        mimeType: 'text/plain',\n        fileName: 'rag.txt'\n      }\n    }\n  }\n];"},"name":"Convert to Binary","type":"n8n-nodes-base.code","typeVersion":1,"position":[1020,40],"id":"ce814ecc-bf2a-4299-9394-69bd04f0b11e"}],"connections":{"Default Data Loader":{"ai_document":[[{"node":"Postgres PGVector Store RAG","type":"ai_document","index":0}]]},"Extract Document Text":{"main":[[{"node":"Postgres PGVector Store RAG","type":"main","index":0}]]},"Aggregate":{"main":[[{"node":"Summarize","type":"main","index":0}]]},"Summarize":{"main":[[{"node":"Set Schema","type":"main","index":0},{"node":"Postgres PGVector Store RAG","type":"main","index":0}]]},"Switch":{"main":[[{"node":"Extract from Excel","type":"main","index":0}],[{"node":"Extract from CSV","type":"main","index":0}],[{"node":"Extract Document Text","type":"main","index":0}],[{"node":"PDF -> PNG","type":"main","index":0}],[{"node":"PPTX -> PDF","type":"main","index":0}]]},"Extract from Excel":{"main":[[{"node":"Aggregate","type":"main","index":0},{"node":"Insert Table Rows","type":"main","index":0}]]},"Set Schema":{"main":[[{"node":"Update Schema for Document Metadata","type":"main","index":0}]]},"Extract from CSV":{"main":[[{"node":"Aggregate","type":"main","index":0},{"node":"Insert Table Rows","type":"main","index":0}]]},"Loop Over Items":{"main":[[],[{"node":"Set Metadata","type":"main","index":0}]]},"Insert Document Metadata":{"main":[[{"node":"ReadFiles from Disk","type":"main","index":0}]]},"Recursive Character Text Splitter":{"ai_textSplitter":[[{"node":"Default Data Loader","type":"ai_textSplitter","index":0}]]},"Delete Old Doc Records":{"main":[[{"node":"Delete Old Data Records","type":"main","index":0}]]},"Delete Old Data Records":{"main":[[{"node":"Insert Document Metadata","type":"main","index":0}]]},"On form submission":{"main":[[{"node":"Save files to /data/shared","type":"main","index":0}]]},"Save files to /data/shared":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Postgres PGVector Store RAG":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Embeddings Ollama RAG":{"ai_embedding":[[{"node":"Postgres PGVector Store RAG","type":"ai_embedding","index":0}]]},"Create Document Metadata Table":{"main":[[]]},"Create Document Rows Table (for Tabular Data)":{"main":[[]]},"Retrieve Data":{"main":[[{"node":"Postgres PGVector Store RAG","type":"main","index":0}]]},"Create Chat History Table":{"main":[[]]},"Set Metadata":{"main":[[{"node":"Delete Old Doc Records","type":"main","index":0}]]},"ReadFiles from Disk":{"main":[[{"node":"Switch","type":"main","index":0}]]},"PPTX -> PDF":{"main":[[{"node":"PDF -> PNG","type":"main","index":0}]]},"PDF -> PNG":{"main":[[{"node":"Collect all image paths","type":"main","index":0}]]},"Collect all image paths":{"main":[[{"node":"Get all image binaries","type":"main","index":0}]]},"Get all image binaries":{"main":[[{"node":"PNG -> MD using AI","type":"main","index":0}]]},"PNG -> MD using AI":{"main":[[{"node":"Create a single MD file","type":"main","index":0}]]},"Create a single MD file":{"main":[[{"node":"Write MD file","type":"main","index":0}]]},"Write MD file":{"main":[[{"node":"Delete all PNG","type":"main","index":0}]]},"Delete all PNG":{"main":[[{"node":"Retrieve Data","type":"main","index":0}]]},"Extract from File":{"main":[[{"node":"Convert to Binary","type":"main","index":0}]]},"On form submission1":{"main":[[{"node":"Extract from File","type":"main","index":0}]]},"Convert to Binary":{"main":[[]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"ae6f4975-286c-4753-b072-5ca5d1bbc9b3","triggerCount":0,"tags":[]}