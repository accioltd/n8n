{"createdAt":"2025-05-26T12:36:16.428Z","updatedAt":"2025-06-05T21:17:16.390Z","id":"Jj9wvxA68gbWKabj","name":"VECKTA Supplier Evaluation","active":false,"nodes":[{"parameters":{},"id":"2bde1ff9-e03f-4d01-be40-5803a4ff0dc6","name":"Postgres Chat Memory1","type":"@n8n/n8n-nodes-langchain.memoryPostgresChat","typeVersion":1,"position":[960,260],"notesInFlow":false,"credentials":{"postgres":{"id":"LtUvizUisCSKWSoT","name":"Postgres Supabase"}}},{"parameters":{"descriptionType":"manual","toolDescription":"Use this tool to fetch all available documents, including the table schema if the file is a CSV or Excel file.","operation":"select","schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"document_metadata","mode":"list","cachedResultName":"document_metadata"},"returnAll":true,"options":{}},"type":"n8n-nodes-base.postgresTool","typeVersion":2.5,"position":[1100,260],"id":"dc18fbcf-487c-4818-9b48-ae897b9f7997","name":"List Documents1","credentials":{"postgres":{"id":"LtUvizUisCSKWSoT","name":"Postgres Supabase"}}},{"parameters":{"descriptionType":"manual","toolDescription":"Run a SQL query - use this to query from the document_rows table once you know the file ID (which is the file path) you are querying. dataset_id is the file_id (file path) and you are always using the row_data for filtering, which is a jsonb field that has all the keys from the file schema given in the document_metadata table.\n\nExample query:\n\nSELECT AVG((row_data->>'revenue')::numeric)\nFROM document_rows\nWHERE dataset_id = '/data/shared/document.csv';\n\nExample query 2:\n\nSELECT \n    row_data->>'category' as category,\n    SUM((row_data->>'sales')::numeric) as total_sales\nFROM dataset_rows\nWHERE dataset_id = '/data/shared/document2.csv'\nGROUP BY row_data->>'category';","operation":"executeQuery","query":"{{ $fromAI('sql_query') }}","options":{}},"type":"n8n-nodes-base.postgresTool","typeVersion":2.5,"position":[1380,260],"id":"51b7b5ea-84ff-43fb-892b-b6b909500cff","name":"Query Document Rows1","credentials":{"postgres":{"id":"LtUvizUisCSKWSoT","name":"Postgres Supabase"}}},{"parameters":{"model":"gpt-4.1-mini","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatAzureOpenAi","typeVersion":1,"position":[820,260],"id":"090de031-3f50-40b9-b6c1-20314fa70767","name":"Azure OpenAI Chat Model1","credentials":{"azureOpenAiApi":{"id":"D1lfxOlHmM9crYiB","name":"Azure gpt-4.1-mini"}}},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[0,0],"id":"42b1c358-7bc0-477c-b1a1-f5a37de7c22d","name":"When clicking ‘Test workflow’"},{"parameters":{"schemaType":"manual","inputSchema":"{\n\n    \"type\": \"object\",\n    \"properties\": {\n      \"supplier_name\":          { \"type\": \"string\"  },\n      \"pv_system_size_kw_dc\":   { \"type\": [\"number\", \"null\"]  },\n      \"pv_module_type\":         { \"type\": \"string\"  },\n      \"pv_module_count\":        { \"type\": [\"integer\", \"null\"] },\n      \"pv_module_warranty\":     { \"type\": \"string\"  },\n      \"inverter_type\":          { \"type\": \"string\"  },\n      \"inverter_count\":         { \"type\": [\"integer\", \"null\"] },\n      \"inverter_warranty\":      { \"type\": \"string\"  },\n      \"year_1_production_kwh\":  { \"type\": [\"number\", \"null\"]  },\n      \"annual_production_kwh\":  { \"type\": [\"number\", \"null\"]  },\n      \"workmanship_warranty\":   { \"type\": \"string\"  },\n      \"domestic_content_bonus\": { \"type\": [\"number\", \"string\", \"null\"] },\n      \"energy_community_bonus\": { \"type\": [\"number\", \"string\", \"null\"] },\n      \"srecs_considered\":       { \"type\": [\"string\", \"boolean\"] },\n      \"prevailing_wages\":       { \"type\": [\"string\", \"boolean\"] },\n      \"sales_tax_included\":     { \"type\": \"boolean\" },\n      \"system_purchase_price\":  { \"type\": [\"number\", \"null\"]  },\n      \"cost_per_watt\":          { \"type\": [\"number\", \"null\"]  }\n    },\n    \"required\": [\n      \"supplier_name\",\n      \"pv_system_size_kw_dc\",\n      \"pv_module_type\",\n      \"pv_module_count\",\n      \"pv_module_warranty\",\n      \"inverter_type\",\n      \"inverter_count\",\n      \"inverter_warranty\",\n      \"year_1_production_kwh\",\n      \"annual_production_kwh\",\n      \"workmanship_warranty\",\n      \"sales_tax_included\",\n      \"system_purchase_price\",\n      \"cost_per_watt\"\n    ],\n    \"additionalProperties\": false\n  }"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[1520,260],"id":"4dd98abd-6920-42ad-933a-3ada50dda5b6","name":"Structured Output Parser"},{"parameters":{"promptType":"define","text":"=Based on the instructions that you know, provide an object as output, where it is the analysis of one different proposal from a supplier with the file_path {{ $('Loop Over Proposals').item.json.file_path }}. Output an object without any text, following the output structure provided, or the parser will break. Return only the JSON object — no surrounding keys such as ‘output’, no array, no explanatory text.","hasOutputParser":true,"options":{"systemMessage":"You are a personal assistant who will help create one JSON file as output, which is the evaluation of several proposals based on the corpus of the documents. The documents are either text based (extracted PDFs) or tabular data (CSVs or Excel documents).\n\nYou are given tools to perform RAG in the 'documents' table, look up the documents available in your knowledge base in the 'document_metadata' table, extract all the text from a given document, and query the tabular files with SQL in the 'document_rows' table.\n\nWhen using the tool 'Get File Contents', you will need to provide a file_id, which is called using the entire path (e.g. /data/shared/Radiance_Solar.pdf, not Radiance_Solar.pdf)\n\nAlways start by performing RAG unless the users asks you to check a document or the question requires a SQL query for tabular data (fetching a sum, finding a max, something a RAG lookup would be unreliable for). If RAG doesn't help, then look at the documents that are available to you, find a few that you think would contain the answer, and then analyze those.\n\nAlways tell the user if you didn't find the answer. Don't make something up just to please them. The output will be in JSON.\n\nThe output will be an array of objects. Return ONLY valid JSON that follows this exact schema:\n\n[{\n   \"supplier_name\":                  \"<string>\",           // Name of the supplier\n  \"pv_system_size_kw_dc\":            \"<number>\",           // PV System Size (kW-DC)\n  \"pv_module_type\":                  \"<string>\",           // PV Module Type\n  \"pv_module_count\":                 \"<integer>\",          // PV Module Count\n  \"pv_module_warranty\":              \"<string>\",           // PV Module Warranty\n  \"inverter_type\":                   \"<string>\",           // Inverter Type\n  \"inverter_count\":                  \"<integer>\",          // Inverter Count\n  \"inverter_warranty\":               \"<string>\",           // Inverter Warranty\n  \"year_1_production_kwh\":           \"<number>\",           // Year 1 Production (kWh)\n  \"annual_production_kwh\":           \"<number>\",           // Annual Production (kWh)\n  \"workmanship_warranty\":            \"<string>\",           // Workmanship Warranty\n  \"domestic_content_bonus\":          \"<string|number>\",    // Domestic Content Bonus\n  \"energy_community_bonus\":          \"<string|number>\",    // Energy Community Bonus\n  \"srecs_considered\":                \"<yes|no|details>\",   // SRECs Considered\n  \"prevailing_wages\":                \"<yes|no|details>\",   // Prevailing Wages\n  \"sales_tax_included\":              \"<yes|no>\",           // Sales Tax Included\n  \"system_purchase_price\":           \"<number>\",           // System Purchase Price\n  \"cost_per_watt\":                   \"<number>\"            // $/W\n}]"}},"id":"c4822444-a6a1-441d-8e11-3a682c8fd929","name":"VECKTA Procurement Agent","type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.6,"position":[1040,0]},{"parameters":{"jsCode":"// 1 ) gather all parsed objects that reached this node\nconst proposals = $input.all().map(i => i.json.output ?? i.json);\n\n// 2 ) wrap that array inside an object, because n8n insists on json = { … }\nreturn [{\n  json: { proposals }        // <-- proposals is now a field inside an object\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1380,0],"id":"6ddd1a39-f63d-44a5-9c38-7698a846dbc4","name":"Display results"},{"parameters":{"assignments":{"assignments":[{"id":"b80831d8-c653-4203-8706-adedfdb98f77","name":"sessionId","value":"={{Math.floor(Math.random()*999999999)}}","type":"string"},{"id":"c4d336fd-4de3-4012-bf16-e7a0239a42a6","name":"","value":"","type":"string"}]},"options":{}},"id":"f1fc7783-2eed-44b8-abb1-3025ad1b646d","name":"Create sessionId","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[700,0]},{"parameters":{"descriptionType":"manual","toolDescription":"=Given a file_path, fetches the text from the document. The file_path will be this: {{ $('Loop Over Proposals').item.json.file_path }}","operation":"executeQuery","query":"SELECT \n    string_agg(text, ' ') as document_text\nFROM documents_pg\n  WHERE metadata->>'file_path' = $1\nGROUP BY metadata->>'file_path';","options":{"queryReplacement":"={{ $fromAI('file_path') }}"}},"type":"n8n-nodes-base.postgresTool","typeVersion":2.5,"position":[1240,260],"id":"9f54d6fe-e8fa-495b-8112-549c655a3133","name":"Get Proposals","credentials":{"postgres":{"id":"LtUvizUisCSKWSoT","name":"Postgres Supabase"}}},{"parameters":{"mode":"retrieve-as-tool","toolName":"documents","toolDescription":"Use RAG to look up information in the knowledgebase.","tableName":"documents_pg","topK":80,"options":{}},"type":"@n8n/n8n-nodes-langchain.vectorStorePGVector","typeVersion":1,"position":[1660,80],"id":"bacbb79b-59f0-4e03-8159-a388138f2468","name":"Embed Procurement Question","credentials":{"postgres":{"id":"LtUvizUisCSKWSoT","name":"Postgres Supabase"}}},{"parameters":{"model":"nomic-embed-text:latest"},"type":"@n8n/n8n-nodes-langchain.embeddingsOllama","typeVersion":1,"position":[1840,240],"id":"7f5159ed-074b-4ce5-abfa-129f2101f586","name":"Embeddings Ollama Chat for Procurement","credentials":{"ollamaApi":{"id":"yM1QH7xdMzXQzdfe","name":"Ollama account"}}},{"parameters":{"operation":"select","schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"document_metadata","mode":"list","cachedResultName":"document_metadata"},"where":{"values":[{"column":"company","value":"Ben E. Keith Alachua"}]},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[220,0],"id":"f91fb862-1226-4c55-9384-9e3809eeffe7","name":"Postgres","credentials":{"postgres":{"id":"LtUvizUisCSKWSoT","name":"Postgres Supabase"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[440,0],"id":"7bc809f3-1be2-42be-b8d3-540ea150971d","name":"Loop Over Proposals"}],"connections":{"Postgres Chat Memory1":{"ai_memory":[[{"node":"VECKTA Procurement Agent","type":"ai_memory","index":0}]]},"List Documents1":{"ai_tool":[[{"node":"VECKTA Procurement Agent","type":"ai_tool","index":0}]]},"Query Document Rows1":{"ai_tool":[[{"node":"VECKTA Procurement Agent","type":"ai_tool","index":0}]]},"Azure OpenAI Chat Model1":{"ai_languageModel":[[{"node":"VECKTA Procurement Agent","type":"ai_languageModel","index":0}]]},"When clicking ‘Test workflow’":{"main":[[{"node":"Postgres","type":"main","index":0}]]},"Structured Output Parser":{"ai_outputParser":[[{"node":"VECKTA Procurement Agent","type":"ai_outputParser","index":0}]]},"VECKTA Procurement Agent":{"main":[[{"node":"Display results","type":"main","index":0}]]},"Display results":{"main":[[{"node":"Loop Over Proposals","type":"main","index":0}]]},"Create sessionId":{"main":[[{"node":"VECKTA Procurement Agent","type":"main","index":0}]]},"Get Proposals":{"ai_tool":[[{"node":"VECKTA Procurement Agent","type":"ai_tool","index":0}]]},"Embed Procurement Question":{"ai_tool":[[{"node":"VECKTA Procurement Agent","type":"ai_tool","index":0}]]},"Embeddings Ollama Chat for Procurement":{"ai_embedding":[[{"node":"Embed Procurement Question","type":"ai_embedding","index":0}]]},"Postgres":{"main":[[{"node":"Loop Over Proposals","type":"main","index":0}]]},"Loop Over Proposals":{"main":[[],[{"node":"Create sessionId","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"8c858902-7128-4d0e-b780-99e8566561ce","triggerCount":0,"tags":[]}