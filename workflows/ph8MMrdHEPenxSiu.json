{"createdAt":"2025-05-18T12:35:15.999Z","updatedAt":"2025-06-05T20:58:27.622Z","id":"ph8MMrdHEPenxSiu","name":"Depoimentos","active":false,"nodes":[{"parameters":{"functionCode":"let results = [];\nfor (const item of $input.all()) {\n  if (!item.binary) continue;\n  for (const key of Object.keys(item.binary)) {\n    const bin = item.binary[key];\n    results.push({ json: { fileName: bin.fileName }, binary: { data: bin } });\n  }\n}\nreturn results;"},"id":"0a2a99fe-9b64-473a-80cb-d811194440f6","name":"Split Binary Data","type":"n8n-nodes-base.function","typeVersion":1,"position":[220,0]},{"parameters":{"fileName":"={{ $binary.data.fileName }}","options":{}},"id":"2727d3ca-0d57-4f95-a77f-2564d1e35fbf","name":"Write file","type":"n8n-nodes-base.writeBinaryFile","typeVersion":1,"position":[400,0]},{"parameters":{"executeOnce":false,"command":"={{`trans=$(tesseract ${$binary.data.fileName} stdout -l por --psm 6 | sed 's/\"/\\\\\"/g'); echo '{\"fileName\":\"${$binary.data.fileName}\",\"transcription\":\"'$trans'\"}'`}}"},"id":"830b3aa7-721a-4251-be6b-ba847c01439b","name":"OCR & Format JSON","type":"n8n-nodes-base.executeCommand","typeVersion":1,"position":[600,0]},{"parameters":{"mode":"runOnceForEachItem","jsCode":"const parsed = JSON.parse($json.stdout);\nreturn {\n  json: { fileName: parsed.fileName, transcription: parsed.transcription },\n  binary: { avatar: $binary.data }\n};"},"id":"2d1ad231-b00a-45b4-a182-2a71a16de179","name":"Merge JSON & Avatar","type":"n8n-nodes-base.code","typeVersion":2,"position":[800,0]},{"parameters":{"functionCode":"const sd = this.getWorkflowStaticData('global');\nsd.totalItems = $input.all().length;\nsd.allResults = [];\nreturn $input.all();"},"id":"dd57677a-49e7-4bb8-a947-da1a5c84a20f","name":"Set Total Items","type":"n8n-nodes-base.function","typeVersion":1,"position":[1000,0]},{"parameters":{"jsCode":"/*\n\nThis gets allResults and totalItems, which were saved as global\nconst workflowStaticData = $getWorkflowStaticData('global');\nconsole.log(workflowStaticData)\n\n*/\n\nconst all = $input.all().map(item => item.json);\nreturn all"},"id":"e5b6e77c-2182-473a-99d9-2ce219232a96","name":"Final Build Table","type":"n8n-nodes-base.code","typeVersion":2,"position":[1440,0]},{"parameters":{"multipleMethods":true,"httpMethod":["POST"],"path":"table","responseMode":"responseNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-20,-40],"id":"fd840417-51f4-4da9-b24c-af2f2a6ecffa","name":"Webhook","webhookId":"477c36c9-6b13-4348-a62f-ce1b673baf1f"},{"parameters":{"respondWith":"allIncomingItems","options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.2,"position":[1660,60],"id":"ef9f6e6b-5550-49ab-8348-1281fc86f61a","name":"Respond to Webhook","alwaysOutputData":true},{"parameters":{"jsCode":"/*****************************************************************\n * Summarise / enrich each OCR transcription with GPT-4o (nano)\n * – Parallel batches   PARALLEL\n * – Launch delay       LAUNCH_DELAY\n * – Retries            MAX_RETRIES with back-off\n * – Returns headline, intention and corrected transcription\n *****************************************************************/\n\nconst endpoint = ($env.OPENAI_ENDPOINT || 'https://api.openai.com/v1').replace(/\\/+$/, '');\nconst apiKey   = $env.OPENAI_API_KEY;\nconst model    = $env.OPENAI_MODEL || 'gpt-4.1-nano';\nif (!apiKey) throw new Error('OPENAI_API_KEY missing');\n\nconst MAX_TOKENS   = 8_192;\nconst PARALLEL     = 20;\nconst LAUNCH_DELAY = 50;          // ms between launches inside a batch\nconst MAX_RETRIES  = 3;\nconst BACKOFF_MS   = 1_000;\n\nconst sleep = ms => new Promise(r => setTimeout(r, ms));\n\nasync function callLLM(text, fileName, attempt = 0) {\n  try {\n    const res = await this.helpers.httpRequest({\n      method:  'POST',\n      url:     `${endpoint}/chat/completions`,\n      json:    true,\n      timeout: 180_000,\n      headers: { Authorization: `Bearer ${apiKey}` },\n      body: {\n        model,\n        temperature: 0.3,\n        max_tokens:  MAX_TOKENS,\n        messages: [\n          {\n            role: 'system',\n            content:\n              'Você recebe um post com fileName e transcription. ' +\n              'Corrija erros, gere headline e intenção. ' +\n              'Retorne **somente** JSON no formato ' +\n              '{ \"headline\": ..., \"transcription\": ..., \"intention\": ..., \"fileName\": ... }.'\n          },\n          {\n            role: 'user',\n            content: JSON.stringify({ fileName, transcription: text })\n          }\n        ]\n      }\n    });\n\n    const reply  = res.choices?.[0]?.message?.content?.trim() || '{}';\n    const parsed = JSON.parse(reply.replace(/^```json\\s*|\\s*```$/g, ''));\n    return parsed;\n\n  } catch (err) {\n    if (attempt >= MAX_RETRIES - 1) throw err;\n    await sleep(BACKOFF_MS * 2 ** attempt);\n    return callLLM.call(this, text, fileName, attempt + 1);\n  }\n}\n\n/* -------- run in parallel batches -------- */\nconst items   = $input.all();\nconst outputs = [];\n\nfor (let start = 0; start < items.length; start += PARALLEL) {\n  const batch = items.slice(start, start + PARALLEL);\n\n  const promises = batch.map((it, idx) => (async () => {\n    await sleep(idx * LAUNCH_DELAY);\n\n    const { fileName, transcription } = it.json || {};\n    if (!transcription) throw new Error('transcription field is missing');\n\n    const result = await callLLM.call(this, transcription, fileName);\n    return { json: { ...it.json, ...result } };\n  })());\n\n  outputs.push(...await Promise.all(promises));\n}\n\nreturn outputs;          // one item per original OCR transcription\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1220,0],"id":"75e730a2-2f6b-45c8-af68-b5cdcee4bd49","name":"Query OpenAI"},{"parameters":{"formTitle":"Raquel-quel","formDescription":"hello","formFields":{"values":[{"fieldLabel":"Arquivos","fieldType":"file","requiredField":true}]},"options":{}},"type":"n8n-nodes-base.formTrigger","typeVersion":2.2,"position":[20,-260],"id":"1d951af2-9ef4-4590-957c-2fa107b232aa","name":"On form submission","webhookId":"8063f8b2-386d-4683-ad87-8adf2679dbdf"}],"connections":{"Split Binary Data":{"main":[[{"node":"Write file","type":"main","index":0}]]},"Write file":{"main":[[{"node":"OCR & Format JSON","type":"main","index":0}]]},"OCR & Format JSON":{"main":[[{"node":"Merge JSON & Avatar","type":"main","index":0}]]},"Merge JSON & Avatar":{"main":[[{"node":"Set Total Items","type":"main","index":0}]]},"Set Total Items":{"main":[[{"node":"Query OpenAI","type":"main","index":0}]]},"Final Build Table":{"main":[[]]},"Webhook":{"main":[[]]},"Respond to Webhook":{"main":[[]]},"Query OpenAI":{"main":[[{"node":"Final Build Table","type":"main","index":0}]]},"On form submission":{"main":[[{"node":"Split Binary Data","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"global":{"totalItems":34,"allResults":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"715356ea-d597-4e07-a9c1-0dd072e6ec8f","triggerCount":2,"tags":[]}