{
  "nodes": [
    {
      "parameters": {
        "public": true,
        "initialMessages": "Hi there! ðŸ‘‹\nMy name is Victor. How can I assist you today?",
        "options": {}
      },
      "id": "35447be7-a605-40fa-ab7d-76b62ca62d29",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [-820, -100],
      "webhookId": "e104e40e-6134-4825-a6f0-8a646d882662"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "documents",
        "toolDescription": "Use RAG to look up information in the knowledge base.",
        "tableName": "documents_context",
        "topK": 30,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1,
      "position": [-440, 300],
      "id": "9d47ba90-d7b8-4862-a55c-3df79c7755f6",
      "name": "Postgres PGVector Store Chat",
      "credentials": {
        "postgres": {
          "id": "LtUvizUisCSKWSoT",
          "name": "Postgres Supabase"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available documents, including the table schema if the file is a CSV or Excel file. You will need the file_id to fetch document in other tools.\n\nThe schema is this:\nid TEXT PRIMARY KEY\ncompany TEXT\nfile_id TEXT\nfile_name TEXT\nfile_mimetype TEXT\nfile_size TEXT\nfile_path TEXT\nfile_ext TEXT\ncreated_at TIMESTAMP DEFAULT NOW()",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "=company",
              "value": "={{ $json.body?.company || $('Set Client')?.item?.json?.company }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [-140, 300],
      "id": "65ee5739-1b62-423e-a0d5-b4a5a64f3bbf",
      "name": "List document metadata",
      "credentials": {
        "postgres": {
          "id": "LtUvizUisCSKWSoT",
          "name": "Postgres Supabase"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9a9a245e-f1a1-4282-bb02-a81ffe629f0f",
              "name": "chatInput",
              "value": "={{ $json?.chatInput || $json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "fb928bed-6bbc-483c-8363-1fd5c489a8b7",
              "name": "=company",
              "value": "={{ $json?.company || \"BC Hydro\" }}",
              "type": "string"
            },
            {
              "id": "b9287c2b-6680-4873-99fe-ab993ef975ad",
              "name": "sessionId",
              "value": "={{ $json.sessionId }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "84d170bf-41d6-46d4-8f74-7458547b63b5",
      "name": "Set Client",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-620, -100]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [-360, 500],
      "id": "e49d331f-b6e5-41a2-84b5-31034a03924a",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "hXdJ6XcRQuQPFcMt",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "o4-mini-2025-04-16",
          "mode": "list",
          "cachedResultName": "o4-mini-2025-04-16"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [-740, 320],
      "id": "ebb374d4-b25f-4df4-a616-7403b4bbb872",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "hXdJ6XcRQuQPFcMt",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=IMPORTANT 1: This is a demo, so I will need you to anonymize the name of the client and call them Acme Inc.\n\nIMPORTANT: You are to answer based on the material provided by the client, not your own knowledge. \n\nDefinitions:\nIT: Information Technology\nOT: Operational Technology\nMRS: Mandatory Reliability Standards\nCIP: Critical Infrastructure Protection\n\nYou are an agent specially built to create report sections for the client {{ $json.body?.company || $json.company }}. For each question, you should avoid using knowledge that has not been provided. Instead, you should check the available documents using the 'List document metadata' tool first, and then activate the other tools to provide a detailed and professinally written report section. \n\n{{ $json?.body?.sections ? \"Here's the complete report just for context: \" + $json?.body?.sections : \"---\" }}\n\nTools available:\n'List document metadata': start here. Use this tool to fetch all available documents, including the table schema if the file is a CSV or Excel file. You will need the file_id to fetch document in other tools.\n'Get General Context from Files': Given a file_id, fetches contextual information from documents.\n'Get File Context from NIST CSF Category': Provide a NIST CSF v2.0 category as 'category_code' (e.g. ID.AM) and get the top 50 chunks associated with that category.\n'Get Assessment Information': This tool is very important, you will use it many times whenever questions about the assessment results appear. It queries the document_rows table, which stores structured assessments in a flexible JSONB format under the row_data column. Each record belongs to a client (company) and a specific source file (file_id). All meaningful dataâ€”such as function, category, descriptions, scores, or commentsâ€”resides inside the row_data column.\n\nThere will be a csv or xlsx file that will contain the assessment of each individual NIST CSF v2.0 practice, which could be for one or multiple business areas. You will need to check the schema column on the table document_metadata to identify what the columns are about, although the 'Query practice rows' tool will provide more information. \n\nFor other contextual information, use the documents_context table.\n\nYour output will be a JSON file that is tip-tap compliant:\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": { \"type\": \"string\", \"enum\": [\"doc\"] },\n    \"content\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"enum\": [\"paragraph\",\"heading\",\"bulletList\",\"orderedList\",\"listItem\",\"blockquote\",\"codeBlock\",\"horizontalRule\"]\n          },\n          \"attrs\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"level\": { \"type\": \"integer\", \"minimum\": 1, \"maximum\": 6 },\n              \"language\": { \"type\": \"string\", \"pattern\": \"^[a-zA-Z0-9_+-]+$\" }\n            }\n          },\n          \"content\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"type\": { \"type\": \"string\", \"enum\": [\"text\",\"hardBreak\"] },\n                \"text\": { \"type\": \"string\" },\n                \"marks\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"type\": { \"type\": \"string\", \"enum\": [\"bold\",\"italic\",\"underline\",\"strike\",\"code\",\"link\"] },\n                      \"attrs\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"href\": { \"type\": \"string\", \"format\": \"uri\" },\n                          \"target\": { \"type\": \"string\" }\n                        },\n                        \"required\": [\"href\"]\n                      }\n                    },\n                    \"required\": [\"type\"]\n                  }\n                }\n              },\n              \"required\": [\"type\"]\n            }\n          }\n        },\n        \"required\": [\"type\",\"content\"]\n      }\n    }\n  },\n  \"required\": [\"type\",\"content\"]\n}\n\n\nEnsure to add the proper headings to each section too, including their numbers and letters when applicable.\n\nSection to be written:\n{{ $json.chatInput || $json.body?.chatInput || 'ERROR: missing chatInput' }}\n\nEnsure to add the proper headings to each section too, including their numbers and letters when applicable. Also add the headings to the title, which will look something like this:\n2.a) Some section title",
        "options": {
          "systemMessage": "=IMPORTANT: You are to answer based on the material provided by the client, not your own knowledge. \n\nTools available:\n'List document metadata': start here. Use this tool to fetch all available documents, including the table schema if the file is a CSV or Excel file. You will need the file_id to fetch document in other tools.\n'Get General Context from Files': Given a file_id, fetches contextual information from documents.\n'Get File Context from NIST CSF Category': Provide a NIST CSF v2.0 category as 'category_code' (e.g. ID.AM) and get the top 50 chunks associated with that category.\n'Get Assessment Information': This tool queries the document_rows table, which stores structured assessments in a flexible JSONB format under the row_data column. Each record belongs to a client (company) and a specific source file (file_id). All meaningful dataâ€”such as function, category, descriptions, scores, or commentsâ€”resides inside the row_data column.",
          "maxIterations": 30
        }
      },
      "id": "e44a1b29-8d7d-4841-8f61-497ec1733520",
      "name": "C3Plan Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [-240, 80]
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Given a file_id, fetches contextual information from documents.",
        "operation": "executeQuery",
        "query": "SELECT string_agg(text, '\\n\\n' ORDER BY (metadata->>'chunk_index')::int) AS full_text\nFROM documents_context\nWHERE\n  metadata->>'file_id' = $1 AND\n  metadata->>'company' = $2;",
        "options": {
          "queryReplacement": "={{ $fromAI('file_id') }},{{ $json.body?.company || $json?.company }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [20, 300],
      "id": "43798c2f-8516-4728-b02c-b0a8c330f4fe",
      "name": "Get General Context from Files",
      "credentials": {
        "postgres": {
          "id": "LtUvizUisCSKWSoT",
          "name": "Postgres Supabase"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Provide a NIST CSF v2.0 category as 'category_code' (e.g. ID.AM) and get the top 50 chunks associated with that category. The v2.0 categories are:\nGV.OC\tOrganizational Context\nGV.RM\tRisk Management Strategy\nGV.RR\tRoles, Responsibilities, and Authorities\nGV.PO\tPolicy\nGV.OV\tOversight\nGV.SC\tCybersecurity Supply Chain Risk Management\nID.AM\tAsset Management\nID.RA\tRisk Assessment\nID.IM\tImprovement\nPR.AA\tIdentity Management, Authentication, and Access Control\nPR.AT\tAwareness and Training\nPR.DS\tData Security\nPR.PS\tPlatform Security\nPR.IR\tTechnology Infrastructure Resilience\nDE.CM\tContinuous Monitoring\nDE.AE\tAdverse Event Analysis\nRS.MA\tIncident Management\nRS.AN\tIncident Analysis\nRS.CO\tIncident Response Reporting and Communication\nRS.MI\tIncident Mitigation\nRC.RP\tIncident Recovery Plan Execution\nRC.CO\tIncident Recovery Communication ",
        "operation": "executeQuery",
        "query": "SELECT text, metadata\nFROM documents_context\nWHERE metadata->>'company' = $2\nORDER BY (metadata->'category_scores'->>$1)::int DESC\nLIMIT 50;",
        "options": {
          "queryReplacement": "={{ $fromAI('category_code') }},{{ $json.body?.company || $('Set Client')?.item?.json?.company }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [200, 300],
      "id": "988f4031-9714-4eb2-8745-f1e29b89b4bc",
      "name": "Get File Context from NIST CSF Category",
      "credentials": {
        "postgres": {
          "id": "LtUvizUisCSKWSoT",
          "name": "Postgres Supabase"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "=This tool queries the document_rows table, which stores structured cybersecurity assessments in a flexible JSONB format under the row_data column. Each row represents one NIST CSF 2.0 subcategory assessment results, for one or many business areas, depending on the dataset.\n\nEach row belongs to a specific client (company) and is linked to one source file (file_id). All meaningful contentâ€”such as function, category, descriptions, scores, and commentsâ€”is stored inside the row_data field, as key-value pairs.\n\nYou must only access values using PostgreSQL JSONB syntax. Never access fields directly as table columns.\n\nWrong (invalid): SELECT \"Function\", \"Category\" FROM document_rows\nCorrect (valid): SELECT row_data->>'Function', row_data->>'Category' FROM document_rows\n\nTo extract values:\n\nUse row_data->>'Field Name' for any text\n\nUse CAST(row_data->>'Field Name' AS FLOAT) to compute with scores\n\nNever reference keys like \"Function\" or \"Business Area | Gen.MRS-Low | Score\" as column names. Always use them inside row_data->>'...key...'.\n\nAll queries must include:\ncompany = '{{ $json.company }}'\nfile_id = '{{ $fromAI(\"file_id\") }}'\n\nYou must never use double quotes outside of row_data->>'...' context. Quotes must only appear inside the JSONB access string.\n\nAll values come from inside row_data. For example:\nCorrect: row_data->>'Business Area | Gen.MRS-Low | Score'\nWrong: \"Business Area | Gen.MRS-Low | Score\"\n\nDo not sort or filter on raw column names. For sorting or filtering scores, always use:\nCAST(row_data->>'Business Area | Gen.MRS-Low | Score' AS FLOAT)\n\nValid Function values:\nGovern\nIdentify\nProtect\nDetect\nRespond\nRecover\n\nValid Category values:\nOrganizational Context\nRisk Management Strategy\nRoles, Responsibilities, and Authorities\nPolicy\nOversight\nCybersecurity Supply Chain Risk Management\nAsset Management\nRisk Assessment\nImprovement\nIdentity Management, Authentication, and Access Control\nAwareness and Training\nData Security\nPlatform Security\nTechnology Infrastructure Resilience\nContinuous Monitoring\nAdverse Event Analysis\nIncident Management\nIncident Analysis\nResponse Coordination\nIncident Mitigation\nIncident Recovery Plan Execution\nRecovery Coordination\n\nAvailable business areas:\nGen.MRS-Low\nGen.MRS-Med\nTrans.MRS-Low\nTrans.MRS-Med\nTDSO.MRS High\nGen.Non-MRS\nTrans.Non-MRS\nTDSO.Non-MRS\nDist.Non-MRS\nDam.Non-MRS\nNIA.Non-MRS\n\nYou must never include keys like \"Function\" or \"Score\" in the SELECT or WHERE clause directly unless accessed via row_data->>'...'.\n\nExample of a valid query:\nSELECT row_data->>'Function', row_data->>'Category', CAST(row_data->>'Business Area | Trans.MRS-Low | Score' AS FLOAT)\nFROM document_rows\nWHERE company = 'BC Hydro'\nAND file_id = 'some_file_id'\nAND row_data->>'Function' = 'Protect'\n\nIf you write a query with:\nSELECT \"Function\"... â†’ It will fail.\nORDER BY \"Category\" â†’ It will fail.\nWHERE \"Business Area | Gen.MRS-Low | Score\" IS NOT NULL â†’ It will fail.\n\nYou must write:\nORDER BY row_data->>'Category'\nWHERE row_data->>'Function' IS NOT NULL\nOr for numeric filters:\nWHERE CAST(row_data->>'Business Area | Gen.MRS-Low | Score' AS FLOAT) >= 3.0\n\nFailure to follow these rules will cause every query to fail. Always access only keys inside row_data using row_data->>'key'. Always use casting for numbers. Never use SQL column references or quotes on the left side of SELECT.\n\nHere are 7 examples of correct queries and what they do:\n\nFind all rows under the \"Recover\" function with a defined Dist.Non-MRS score:\nSELECT row_data->>'Index', row_data->>'Function', row_data->>'Category', row_data->>'Subcategory Description', row_data->>'Business Area | Dist.Non-MRS | Score' FROM document_rows WHERE company = 'BC Hydro' AND file_id = '...' AND row_data->>'Function' = 'Recover' AND row_data->>'Business Area | Dist.Non-MRS | Score' IS NOT NULL\n\nGet all scores and comments from Trans.Non-MRS where Function is \"Protect\":\nSELECT row_data->>'Function', row_data->>'Category', row_data->>'Subcategory Description', row_data->>'Business Area | Trans.Non-MRS | Score', row_data->>'Business Area | Trans.Non-MRS | Comments' FROM document_rows WHERE company = 'BC Hydro' AND file_id = '...' AND row_data->>'Function' = 'Protect'\n\nReturn all rows where Gen.Non-MRS scored below 3:\nSELECT row_data->>'Index', row_data->>'Function', row_data->>'Category', CAST(row_data->>'Business Area | Gen.Non-MRS | Score' AS FLOAT) AS score FROM document_rows WHERE company = 'BC Hydro' AND file_id = '...' AND CAST(row_data->>'Business Area | Gen.Non-MRS | Score' AS FLOAT) < 3\n\nCompute average scores by Function for Trans.MRS-Low:\nSELECT row_data->>'Function' AS function, AVG(CAST(row_data->>'Business Area | Trans.MRS-Low | Score' AS FLOAT)) AS avg_score FROM document_rows WHERE company = 'BC Hydro' AND file_id = '...' AND row_data->>'Business Area | Trans.MRS-Low | Score' IS NOT NULL GROUP BY row_data->>'Function'\n\nGet comments for subcategory GV.OC-01 in Gen.MRS-Low:\nSELECT row_data->>'Function', row_data->>'Category', row_data->>'Index', row_data->>'Business Area | Gen.MRS-Low | Comments' FROM document_rows WHERE company = 'BC Hydro' AND file_id = '...' AND row_data->>'Index' = 'GV.OC-01'\n\nAggregate average scores by Category for Gen.MRS-Med:\nSELECT row_data->>'Category' AS category, AVG(CAST(row_data->>'Business Area | Gen.MRS-Med | Score' AS FLOAT)) AS avg_score FROM document_rows WHERE company = 'BC Hydro' AND file_id = '...' AND row_data->>'Business Area | Gen.MRS-Med | Score' IS NOT NULL GROUP BY row_data->>'Category'\n\nCompare multiple business areas for subcategory GV.OC-01:\nSELECT row_data->>'Index' AS index, row_data->>'Function' AS function, row_data->>'Business Area | Gen.MRS-Low | Score' AS gen_mrs_low, row_data->>'Business Area | TDSO.MRS High | Score' AS tdso_mrs_high, row_data->>'Business Area | NIA.Non-MRS | Score' AS nia_non_mrs FROM document_rows WHERE company = 'BC Hydro' AND file_id = '...' AND row_data->>'Index' = 'GV.OC-01'",
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [380, 300],
      "id": "3a31fe10-1f06-4f19-8b80-f179afac2fb3",
      "name": "Get Assessment Information",
      "credentials": {
        "postgres": {
          "id": "LtUvizUisCSKWSoT",
          "name": "Postgres Supabase"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.sessionId || $json.body?.sessionId }}",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [-580, 320],
      "id": "1c0c1613-29c1-41bd-be70-dab2e7257840",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "LtUvizUisCSKWSoT",
          "name": "Postgres Supabase"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "report/reporter",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [-620, 100],
      "id": "da67d049-7b87-4bde-9889-e5716645e292",
      "name": "Webhook",
      "webhookId": "451c6770-a416-4dc5-b581-8b00baea0e21"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [320, 80],
      "id": "47beacd7-e740-4f65-ae65-ecfc688e818c",
      "name": "Response"
    }
  ],
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Set Client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store Chat": {
      "ai_tool": [
        [
          {
            "node": "C3Plan Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "List document metadata": {
      "ai_tool": [
        [
          {
            "node": "C3Plan Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set Client": {
      "main": [
        [
          {
            "node": "C3Plan Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store Chat",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "C3Plan Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "C3Plan Agent": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get General Context from Files": {
      "ai_tool": [
        [
          {
            "node": "C3Plan Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get File Context from NIST CSF Category": {
      "ai_tool": [
        [
          {
            "node": "C3Plan Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Assessment Information": {
      "ai_tool": [
        [
          {
            "node": "C3Plan Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "C3Plan Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "C3Plan Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ab05c32f8e94331cd8255d6a3b748aa8912915e470c28d0e230fb292b2bee13b"
  }
}
